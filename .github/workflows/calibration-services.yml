name: Deploy Calibration API's

on:
  workflow_dispatch:
    inputs:
      repoName:
        description: 'Repository to Deploy'     
        required: true
        type: choice
        default: 'calibration-services'
        options:
          - calibration-services
      shaId:
        description: 'Commit id to Deploy'     
        required: true
        default: 'main'
      deployEnvironment:
        description: 'Environment to Deploy'     
        required: true
        type: choice
        default: 'dev'
        options:
          - dev
          - prod

env:
  REPO_NAME: ${{ github.event.inputs.repoName }}
  AWS_REGION: ap-south-1
  SHA_ID: ${{ github.event.inputs.shaId }}
  DEPLOY_ENV: ${{ github.event.inputs.deployEnvironment }}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout main branch
      if: ${{ env.SHA_ID == 'main'}}
      uses: actions/checkout@v3
      with:
        ref: refs/heads/${{ env.SHA_ID }}
        repository: SarvashreeCalibration/${{ env.REPO_NAME }}
        token: ${{ secrets.GIT_TOKEN }}
    - name: Checkout Commit id
      if: ${{ env.SHA_ID != 'main'}}
      uses: actions/checkout@v3
      with:
        ref: ${{ env.SHA_ID }}
        repository: SarvashreeCalibration/${{ env.REPO_NAME }}
        token: ${{ secrets.GIT_TOKEN }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up JDK 17 and Build
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'corretto'
        cache: maven
    - name: Build with Maven
      run: |
        if [[ "${{ env.DEPLOY_ENV }}" == "prod" ]]; then
          mvn -Pprod clean install
        else
          mvn -Pdev clean install
        fi
 
    - name: Upload jar in ec2
      uses: easingthemes/ssh-deploy@main
      with:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        REMOTE_HOST: ${{ secrets.SSH_HOST }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        TARGET: ${{ secrets.REMOTE_HOME_TARGET }}
        local_deploy_path: target/calibration-service-${{ env.DEPLOY_ENV }}.jar
        EXCLUDE: 'pom.xml,/src/,README.md,HELP.md,mvnw,mvnw.cmd,.git,.gitignore,/target/classes/,/target/generated-sources/,/target/maven-archiver/,/target/surefire-reports/,/target/generated-test-sources/,/target/maven-status/,/target/test-classes/,/target/*.original'
    - name: Generate Timestamp
      id: timestamp
      run: echo "::set-output name=timestamp::$(date +%s)"
 
    - name: Run jar
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.REMOTE_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          if [[ "${{ env.DEPLOY_ENV }}" == "prod" ]]; then
            PORT=8080;
          else
            PORT=8083;
          fi
          kill $(lsof -t -i :$PORT) > /dev/null 2>&1;
          aws s3 mv calibrationlog-${{ env.DEPLOY_ENV }}-logs* s3://ec2-server-logs
          nohup java -jar ${{ secrets.REMOTE_HOME_TARGET }}/target/calibration-service-${{ env.DEPLOY_ENV }}.jar --server.port=$PORT > calibrationlog-${{ env.DEPLOY_ENV }}-logs-$(date -d @${{ steps.timestamp.outputs.timestamp }} +"%Y-%m-%d_%H-%M-%S").out 2>&1 &
          exit
